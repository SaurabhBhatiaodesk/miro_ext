{% assign avg_rating = block.settings.product.metafields.demo.avg_rating.value | round %}
<span style="color:{{ block.settings.colour }}">
  {% if request.path == '/collections/all' or request.path == '/search' %}
    {% render 'starsnew', rating: avg_rating %}
  {% endif %}  
</span>
 <!-- Add this script to theme.liquid or a common template file -->
 <script>
  async function getAccessTokenplp() {
    const store = location.href.split('https://');
    const shopsplit = store[1].split('/');
    const shop = shopsplit[0];
    const response = await fetch(`https://miro-60cda8b7fcb1.herokuapp.com/api/get?shop=${shop}`);
    if (response.ok) {
      const data = await response.json();
      console.log("resultClassNameresultClassName",data)
      localStorage.setItem("integration_id", data.integration_id)
      localStorage.setItem("html", data.html)
      localStorage.setItem("htmlSuggestion", data.htmlSuggestion)
      localStorage.setItem("filterhide", data.filterhide)
      localStorage.setItem("paginationClass", data.paginationClass)
      localStorage.setItem("recordnumberhide", data.recordnumberhide)
      localStorage.setItem("resultClassName", data.resultClassName)
      localStorage.setItem("suggestionSearch", data.suggestionSearch)
      return data;
    }
    else {
      return {};
    }
  }
  const currentURLMiro = window.location.href;
  async function getProductJson(searchQuery){
    const myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json")
    const resultClassName = localStorage.getItem("resultClassName")
    let raw;
    
    raw = JSON.stringify({
      query: "query Search($integration_id: String!, $text_query: String!, $limit: Int) {\n    search(query: { integration_id: $integration_id,text_query: $text_query,limit:$limit }) {\n        filter_facets\n        has_more\n        skip\n        limit\n      data {\n            id\n            alias\n            name\n            url\n   image\n  price\n    }\n    }\n}\n",
      variables: {
                        integration_id: "ba5e511a-4052-44fc-88b7-01f1cfee9a77",
                        text_query: searchQuery,
                        limit: 5,
                    }
    })
    console.log("raw:::",raw);
        const requestOptions = {
          method: 'POST',
          headers: myHeaders,
          body: raw,
          redirect: 'follow'
        };
    
        
          const searchProduct = await fetch("https://api.miros.services/graphql", requestOptions);
          
    if (!searchProduct.ok) {
            throw new Error(`HTTP error! Status: ${searchProduct.status}`);
          }
         return  productJSON = await searchProduct.json();
  }
  
          if(localStorage.getItem("suggestionSearch"))
          {}
          else{}
            const tokenAndSecretIdPromise = getAccessTokenplp();

                document.addEventListener('DOMContentLoaded', function () {
                  // Check if the element exists
                  const searchInput = document.querySelector('.search__input');
                  if (searchInput) {
                      // Attach the 'keydown' event listener to the input
                      searchInput.addEventListener('keydown',async function (event) {
                        setTimeout(async() => {
                        let filterHide = localStorage.getItem("filterhide");
                          const filterArray = filterHide.split(","); // Assuming filterHide is a string of IDs or classes separated by commas

                          filterArray.forEach(selector => {
                            // Trim whitespace from the selector to ensure proper matching
                            selector = selector.trim();
                            // Query all elements matching the current selector
                            const elements = document.querySelectorAll(selector);
                            // Loop through each element and hide it
                            elements.forEach(element => {
                              element.style.display = 'none';
                            });
                          });
                          const searchQuery = event.target.value;
                          let productJSON = await getProductJson(searchQuery);
                          console.log(searchQuery); // Do something with the searchQuery, like logging it or using it for a search
                          console.log("DOMContentLoaded recomendation access token and secret",tokenAndSecretIdPromise);
                          tokenAndSecretIdPromise.then(tokenAndSecretId => {
                            console.log("DOMContentLoaded recomendation under then");
                            // Validate that tokenAndSecretId is an object and contains the suggestionSearch property
                            if (tokenAndSecretId && tokenAndSecretId.suggestionSearch) {
                              console.log("get suggestion")
                                console.log("entered into function");
                                console.log("tokenAndSecretId", tokenAndSecretId);
                        
                                if (document.getElementById(tokenAndSecretId?.suggestionSearch)) {
                                  // Assuming `productJSON` is available and contains the fetched data
                                  if (productJSON && productJSON.data && productJSON.data.search && productJSON.data.search.data) {
                                    console.log("productJSON.data.suggestions.data",productJSON.data.search.data)
                                    const firstFiveProducts = productJSON.data.search.data.slice(0, 5).map(product => {
                                      let changeText = tokenAndSecretId?.htmlSuggestion;
                                      changeText = changeText.replace(/\[\[NAME\]\]/g, product.name);
                                      changeText = changeText.replace(/\[\[IMAGE\]\]/g, product.image);
                                      {% comment %} console.log("changeText", changeText); {% endcomment %}
                                      return `
                                        ${changeText}
                                      `;
                                    }).join('');
                                    console.log("firstFiveProducts", firstFiveProducts);
                                    document.getElementById(tokenAndSecretId?.suggestionSearch).innerHTML = firstFiveProducts;
                                  } else {
                                    document.getElementById(tokenAndSecretId?.suggestionSearch).innerHTML = "No products found";
                                  }
                                } else {
                                  console.error("Element with ID 'predictive-search-results-products-list' not found.");
                                }
                        
                              var predictiveSearchQueriesList = document.querySelector('#predictive-search-results-groups-wrapper .predictive-search__result-group:nth-child(1)');
                              var predictiveSearchQueriesList1 = document.querySelector('#predictive-search-results-groups-wrapper .predictive-search__result-group:nth-child(2)');
                                if (predictiveSearchQueriesList) {
                                  predictiveSearchQueriesList.style.display = 'none';
                                  predictiveSearchQueriesList1.style.padding = '1rem 2rem';
                                } else {
                                  console.error("Element with ID 'predictive-search-results-queries-list' not found.");
                                }
                            
                            } else {
                              console.error("tokenAndSecretId or tokenAndSecretId.suggestionSearch is not defined correctly.");
                            }
                          }).catch(error => {
                            console.error("Error resolving tokenAndSecretId promise:", error);
                          });
                        },1000);
                        });
                        
                  }
              });
                
                  

    
    
  
  //Miro Cart Drawer
  cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');

  window.addEventListener('AddItemToCart', function(event) {
    const productVariantId = event.detail;

    // Perform AJAX request to add item to cart
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        items: [{
          id: productVariantId,
          quantity: 1,
        }],
        sections: 'cart-drawer,cart-icon-bubble'
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Item added to cart:', data);
      publish(PUB_SUB_EVENTS.cartUpdate, {source: 'miros-overlay', productVariantId});
      cart.renderContents(data);
      if (cart && cart.classList.contains('is-empty')) cart.classList.remove('is-empty');
    })
    .catch((error) => {
      console.error('Error adding item to cart:', error);
    });
  });
  var integrationID = localStorage.getItem("integration_id");
  </script>
  <script type="module" src="https://content.miros.services/frontend/public/main/container/assets/container.bundle.js" data-miros-integration-id=""+integrationID ></script>

{% schema %}
{
  "stylesheet":"search.css",
  "name": "miro AI",
  "target": "head",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}

