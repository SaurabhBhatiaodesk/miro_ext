<meta name="viewport" content="width=device-width, initial-scale=1.0">


<style>


/* SEARCH BAR CONTAINER */
.search-local {
	display: flex;
	align-items: center;
	column-gap: 2rem;
	padding-left: 2rem;
	background: #fff;
	border-radius: 1rem;
	height: auto;
	border: 0.1rem solid blue;
	border-right: none;
	    width: 40%;
    margin: auto;
}


/* INPUT */
.search-local input {
	height: 100%;
	width: 100%;
	flex: 1 1 25rem;
	display: flex;
	outline: none;
	border: none;
	font-size: 16px;
    padding: 10px 11px;
    background: transparent;
}
input[type="text"]::placeholder {
	 font-size: 16px;
}
 .search_resultAPP {
    max-height: 30rem;
    overflow: auto;
    padding: 10px;
	    width: 40%;
    margin: auto;
}
*:focus-visible{
	outline:0px !important;
	box-shadow:none !important;
}
/* BUTTON */
.search-local button {
    background: blue;
    border: none;
    border-radius: 0 1rem 1rem 0;
    font-weight: 500;
    font-size: 16px;
    height: 4rem;
    padding: 0px 18px;
    cursor: pointer;
    transition: all 0.3s;
    text-align: center;
}

button a {
	color: #fff;
    text-decoration: auto;
}
.product_data p {
    margin: 0;
    color: #fff;
}

.product_data {
    display: flex;
    margin-top: 10px;
}
.main_result {
    display: flex;
    align-items: center;
}

.main_result img {
    height: 44px;
    object-fit: cover;
    width: 60px;
    margin-right: 10px;
}
.search_result {
    margin-top: 1rem;
    background: transparent;
    padding: 10px;
    border: 1px solid #ccccccc7;

}
.main_result{
    margin-bottom: 10px;

}
/* MEDIAS */
@media (max-width: 767px) {
	.search-local {
		padding-left: 16px;
		column-gap: 0.25rem;
		width:100%;
	}

	.search-local button {
		width: 10rem;
	}
    input[type="text"]::placeholder {
	 font-size: 16px;
}
	.search_resultAPP{
		width:100%;
	}
}

</style>
<body>


<div class="checkbox-container">
        <!-- Brand Filters -->
        <label>
            <input type="checkbox" onclick="updateFilters()" value="POKEMON" data-filter-type="brand">
            POKEMON
        </label>
        <label>
            <input type="checkbox" onclick="updateFilters()" value="LEGO" data-filter-type="brand">
            LEGO
        </label>
        <!-- Category Filters -->
        <label>
            <input type="checkbox" onclick="updateFilters()" value="TOYS" data-filter-type="category">
            TOYS
        </label>
        <label>
            <input type="checkbox" onclick="updateFilters()" value="SHOES" data-filter-type="category">
            SHOES
        </label>

    </div>

    <!-- Price Range Input -->
    <div class="price-range">
        <label for="min-price">Min Price: $</label>
        <input type="number" id="min-price" placeholder="0" oninput ="updateFilters()">
        <label for="max-price">Max Price: $</label>
        <input type="number" id="max-price" placeholder="1000" oninput ="updateFilters()">
    </div>
    <!-- Your HTML content -->
    {% comment %} <div id="predictive-search__result-group" class="search-local"></div> {% endcomment %}
    <script>

  async function getSearchQuery() {
            const currentURL = window.location.href;
            const url = new URL(currentURL);
            const searchQuery = url.searchParams.get('q') || document.getElementById('search-input').value;
            const { selectedBrands, selectedCategories } = getSelectedValues();
            const minPrice = document.getElementById('min-price').value;
            const maxPrice = document.getElementById('max-price').value;
            return { searchQuery, selectedBrands, selectedCategories, minPrice, maxPrice };
        }

 function getSelectedValues() {
            const selectedBrands = [];
            const selectedCategories = [];
            const selectedCheckboxes = document.querySelectorAll('.checkbox-container input[type="checkbox"]:checked');

            selectedCheckboxes.forEach(checkbox => {
                const filterType = checkbox.getAttribute('data-filter-type');
                if (filterType === 'brand') {
                    selectedBrands.push(checkbox.value);
                } else if (filterType === 'category') {
                    selectedCategories.push(checkbox.value);
                }
            });

            return { selectedBrands, selectedCategories };
        }
       async function updateFilters() {
            const { searchQuery, selectedBrands, selectedCategories, minPrice, maxPrice } = await getSearchQuery();
            console.log('Filters:', { searchQuery, selectedBrands, selectedCategories, minPrice, maxPrice });
            await getBrand(searchQuery, selectedBrands, selectedCategories, minPrice, maxPrice);
        }

async function getBrand(searchQuery, brands = [], categories = [], minPrice = '', maxPrice = '') {
  console.log("entered into functionnnnnnnn")
  const getSearchValue = await getSearchQuery();
  console.log("getSearchQuerygetSearchQueryyy", getSearchValue)

  const filterQuery = {};
            // Add filters only if they are present
            if (brands.length > 0) {
                filterQuery.brand = { __in: brands };
            }
            if (categories.length > 0) {
                filterQuery.category_name = { __in: categories };
            }
            if (minPrice || maxPrice) {
                filterQuery.price = {};
                if (minPrice) filterQuery.price.__gte = Number(minPrice);
                if (maxPrice) filterQuery.price.__lte = Number(maxPrice);
            }

  const myHeaders = new Headers();
myHeaders.append("Content-Type", "application/json")
const resultClassName = localStorage.getItem("resultClassName")
let raw;

raw = JSON.stringify({
  query: "query Search($integration_id: String!, $filter_query: JSONObject) {\n    search(query: { integration_id: $integration_id, filter_query: $filter_query }) {\n        filter_facets\n        has_more\n        skip\n        limit\n        data {\n            id\n            alias\n            name\n            url\n   image\n  price\n    }\n    }\n}\n",
  variables: {
                    integration_id: "ba5e511a-4052-44fc-88b7-01f1cfee9a77",
                    text_query: searchQuery,
                    filter_query: filterQuery,
                }
})

    const requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: raw,
      redirect: 'follow'
    };

    try {
      const searchProduct = await fetch("https://api.miros.services/graphql", requestOptions);
      console.log("searchProductsearchProductttt",searchProduct)
if (!searchProduct.ok) {
        throw new Error(`HTTP error! Status: ${searchProduct.status}`);
      }
       productJSON = await searchProduct.json();
       console.log("tokenAndSecretId.Html",tokenAndSecretId.Html,"productJSONproductJSONNNNyy",productJSON)
console.log("productJSON.data.search.data.length",productJSON.data.search.data.length)
      if (productJSON.data.search.data.length > 0) {
      const statusElement = document.querySelector('p[role="status"]');
      console.log("statusElementtt",statusElement)
      if (statusElement) {
        statusElement.style.display = 'none';
      }
const tokenAndSecretId = await getAccessToken();

      const htmlContent = productJSON.data.search.data.map((value, index) => {
        console.log("Mapping value:", value, "index:", index);
        let changeText = tokenAndSecretId.Html || '';
        if (changeText) {
          changeText = changeText.replace(/\[\[TITLE\]\]/g, value.name);
          changeText = changeText.replace(/\[\[PRICE\]\]/g, value.price.toFixed(2));
          changeText = changeText.replace(/\[\[IMAGESRC\]\]/g, value.image);
          changeText = changeText.replace(/\[\[HANDLE\]\]/g, "https://quickstart-db2dc1d6.myshopify.com/" + value.url);
        } else {
          console.error("tokenAndSecretId.Html is undefined");
        }

        console.log("Modified changeText:", changeText);
        return `${changeText}`;
      }).join('');

      document.querySelector(resultClassName).innerHTML = htmlContent || '';
      document.querySelector(resultClassName).style.visibility = "visible";
      }
 } catch (error) {
    console.error("Error in getBrand:", error);
  }
    console.log("getSearchValueeeee",getSearchValue?.searchQuery)

}
        // Example usagesssss
        setInterval(()=>{
 const selectedValues= document.querySelectorAll('.checkbox-container input[type="checkbox"]')
        console.log("selectedValuesselectedValues",selectedValues)
        document.querySelectorAll('.checkbox-container input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                console.log('Selected values:', getSelectedValues());
            });
        });
        },500)

let previous_url = window.location.href;
let productJSON;
if (window.location.href.includes("search")) {
  // Get all <ul> elements
  var ulElement = document.getElementById('main-search-ul');
  // Loop through each <ul> element and set visibility to 'visible'
  if (ulElement) {
    ulElement.style.visibility = 'hidden';
    // Get all immediate child <li> elements of the <ul>
    var liElements = ulElement.children;
    // Loop through each child <li> element and set visibility to 'hidden'
    for (var i = 0; i < liElements.length; i++) {
      liElements[i].style.visibility = 'hidden';
    }
  }
}

async function getAccessToken() {
  const store = location.href.split('https://');
  const shopsplit = store[1].split('/');
  const shop = shopsplit[0];
  const response = await fetch(`https://bbs-kelly-ages-yacht.trycloudflare.com/api/get?shop=${shop}`);
  if (response.ok) {
    const data = await response.json();
    console.log("resultClassNameresultClassName",data)
    // document.querySelector(data.resultClassName).innerHTML = '';
    localStorage.setItem("resultClassName", data.resultClassName)
    localStorage.setItem("suggestionSearch", data.suggestionSearch)
    return data;
  }
  else {
    return {};
  }
}
let mainHTML = '';
let fresh = 1;
async function loader() {
  if (window.location.href.includes("search")) {
    let resultClassName = localStorage.getItem("resultClassName")
    if (!resultClassName || resultClassName == ''){
      const tokenAndSecretId = await getAccessToken();
      resultClassName = localStorage.getItem("resultClassName")
    }
    const loaderHTML = `<img style="margin:auto;text-align:center;" src='https://cdn.shopify.com/s/files/1/0595/6744/0038/files/hzk6C.gif?v=1704974161' /> `;
    if (document.querySelector(resultClassName)) {
      mainHTML = document.querySelector(resultClassName).innerHTML;
      document.querySelector(resultClassName).innerHTML = loaderHTML;
    }
  }
}

loader(); // call loader function

async function search(hello = "") {
  const tokenAndSecretId = await getAccessToken();
  if (window.location.href.includes("search") && tokenAndSecretId?.resultClassName && tokenAndSecretId?.resultClassName != '') {
    document.title = "Search Results";
    document.querySelector('ul.product-grid').style.visibility = 'hidden';
    const resultClassName = localStorage.getItem("resultClassName")
    // document.querySelector(resultClassName).innerHTML = '';
    const getSearchValue = await getSearchQuery();
    if (getSearchValue.searchQuery !== null) {
      const loaderHTML = `<img style="margin:auto;text-align:center;" src='https://cdn.shopify.com/s/files/1/0595/6744/0038/files/hzk6C.gif?v=1704974161' /> `;
      if (document.querySelector(resultClassName)) {
        setTimeout(() => {
          // Show loader code
          document.querySelector(resultClassName).innerHTML = loaderHTML;
        }, 300);
      }
    }
    const myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    let filters = filters_static;
    filters = filters.replace(/\[\[QUERY\]\]/g, getSearchValue.searchQuery);
    var inner_facets = '';
    switch (getSearchValue.sort_by) {
      case 'similarity':
        var sort_by = 'relevance';
        break;
      case 'pricesort_inc':
        var sort_by = 'price-ascending';
        break;
      case 'pricesort_dec':
        var sort_by = 'price-descending';
        break;
      default:
        var sort_by = 'relevance';
        break;
    }
    if (getSearchValue.availability && window.location.href.includes('filter.v.availability')) {

      inner_facets = inner_facets + `<facet-remove>
        <a href="/search?q=${getSearchValue.searchQuery}&filter.v.price.gte=${getSearchValue.minPrice ? getSearchValue.minPrice : ''}&amp;filter.v.price.lte=${getSearchValue.maxPrice ? getSearchValue.maxPrice : ''}&amp;sort_by=${sort_by}" class="active-facets__button active-facets__button--light">
          <span class="active-facets__button-inner button button--tertiary">
            Availability: In stock
            <svg aria-hidden="true" focusable="false" width="12" height="13" class="icon icon-close-small" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.48627 9.32917L2.82849 3.67098" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
    <path d="M2.88539 9.38504L8.42932 3.61524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>

            <span class="visually-hidden">Remove filter</span>
          </span>
        </a>
      </facet-remove>`;
    }
    if (getSearchValue.minPrice || getSearchValue.maxPrice) {
      //var avail = getSearchValue.availability ? 1 : 0;
      var fiurl = new URL(previous_url);
      var avail = fiurl.searchParams.get('filter.v.availability') ? 'filter.v.availability=' + fiurl.searchParams.get('filter.v.availability') + "&" : '';
      var minPrice = (getSearchValue.minPrice && getSearchValue.minPrice!=null)?getSearchValue.minPrice:0;
      var maxPrice = (getSearchValue.maxPrice && getSearchValue.maxPrice!=null)?'$'+getSearchValue.maxPrice:"Max Price";
      inner_facets = inner_facets + `<facet-remove>
      <a href="/search?${avail}q=${getSearchValue.searchQuery}&amp;sort_by=${sort_by}" class="active-facets__button active-facets__button--light">
        <span class="active-facets__button-inner button button--tertiary">$${minPrice}
-${maxPrice}
<svg aria-hidden="true" focusable="false" width="12" height="13" class="icon icon-close-small" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.48627 9.32917L2.82849 3.67098" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
<path d="M2.88539 9.38504L8.42932 3.61524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
</svg>

          <span class="visually-hidden">Remove filter</span>
        </span>
      </a>
    </facet-remove>`;
    }
    inner_facets = inner_facets + `<facet-remove class="active-facets__button-wrapper">
    <a href="?q=${getSearchValue.searchQuery}&amp;options%5Bprefix%5D=last&amp;sort_by=${sort_by}" class="active-facets__button-remove underlined-link">
      <span>Remove all</span>
    </a>
    </facet-remove>`;
    filters = filters.replace(/\[\[FACET\]\]/g, inner_facets);

const raw = JSON.stringify({
  query: "query Search($integration_id: String!, $filter_query: JSONObject) {\n    search(query: { integration_id: $integration_id, filter_query: $filter_query }) {\n        filter_facets\n        has_more\n        skip\n        limit\n        data {\n            id\n            alias\n            name\n            url\n   image\n  price\n    }\n    }\n}\n",
  variables: {"integration_id":"ba5e511a-4052-44fc-88b7-01f1cfee9a77","text_query":getSearchValue.searchQuery,"filter_query":{}}
})
    const requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: raw,
      redirect: 'follow'
    };
    console.log("getSearchValue.searchQuerygetSearchValue.searchQuery",getSearchValue?.searchQuery)
    try {
      const searchProduct = await fetch("https://api.miros.services/graphql", requestOptions);

      if (!searchProduct.ok) {
        throw new Error(`HTTP error! Status: ${searchProduct.status}`);
      }


       productJSON = await searchProduct.json();
       console.log("tokenAndSecretId",tokenAndSecretId.Html,"productJSONproductJSON",productJSON)
      if (productJSON.data.search.data.length > 0) {


          // Get the element with the specified role attribute and content then hide the element
          if (document.querySelector('p[role="status"]')) {
            document.querySelector('p[role="status"]').style.display = 'none';
          }
          // Get the element with the ID 'ProductGridContainer'
          var productGridContainer = document.getElementById('ProductGridContainer');
          // Insert the filters above the ProductGridContainer
          productGridContainer.insertAdjacentHTML('beforebegin', filters);
      const htmlContent = productJSON.data.search.data.map((value, index) => {
        console.log("in the map")
          let changeText = tokenAndSecretId.Html;
          //var handle = value.url.substring(value.url.indexOf("products"));
          changeText = changeText.replace(/\[\[TITLE\]\]/g, value.name);
          changeText = changeText.replace(/\[\[PRICE\]\]/g, value.price.toFixed(2));
          changeText = changeText.replace(/\[\[IMAGESRC\]\]/g, value.image);
          changeText = changeText.replace(/\[\[HANDLE\]\]/g, "https://quickstart-db2dc1d6.myshopify.com/"+value.url);
          console.log("changeText",changeText)
          return `${changeText}`;
        }).join('');
        document.querySelector(resultClassName).innerHTML = htmlContent || '';
        document.querySelector(resultClassName).style.visibility="visible";
      }
      else {
        mainHTML = mainHTML.replace(/style="visibility:hidden"/g, '');

        if (hello != 'hello') {
          document.querySelector(resultClassName).innerHTML = mainHTML || '';
        }
        else {
          document.querySelector(resultClassName).innerHTML = mainHTML || '';
        }
        if (document.querySelector(resultClassName).innerHTML == '') {
          document.querySelector('p[role="status"]').style.display = 'none';
          document.querySelector('p[role="status"]').innerHTML = 'Sorry but as per your search results are not comming please try again';
        }
      }
    } catch (error) {
      var ulElement = document.getElementById('main-search-ul');
      // Loop through each <ul> element and set visibility to 'visible'
      if (ulElement) {
        ulElement.style.visibility = 'visible';
      }
      mainHTML = mainHTML.replace(/style="visibility:hidden"/g, '');

      document.querySelector(resultClassName).innerHTML = mainHTML || '';
      console.error('Error fetching data:', error.message);
    }
  }
}
let change_url = [];
search(); // call search function
setInterval(async function () {
  if (previous_url != window.location.href && window.location.href.includes("search")) {
    // Get all <ul> elements
    var ulElement = document.getElementById('main-search-ul');

    // Loop through each <ul> element and set visibility to 'visible'
    if (ulElement) {
      ulElement.style.visibility = 'hidden';
      // Get all immediate child <li> elements of the <ul>
      var liElements = ulElement.children;

      // Loop through each child <li> element and set visibility to 'hidden'
      for (var i = 0; i < liElements.length; i++) {
        liElements[i].style.visibility = 'hidden';
      }
    }
    const resultClassName = localStorage.getItem("resultClassName")
    //document.querySelector(resultClassName).innerHTML = '';
    previous_url = window.location.href;
    search("hello");
  }
}, 900);
    const fiurl = new URL(previous_url);
    const q_value = fiurl.searchParams.get('q');

function filter_vaule(value,filter){
  var checkbox = document.getElementById('Filter-filter.v.availability-2');
  var checkbox1 = document.getElementById('Filter-filter.v.availability-1');
  if(value=='1'){
    if (checkbox.checked) {
        checkbox.checked = false;
    }
  }else{
    checkbox1.checked = false;
  }
  if(filter.checked){
  change_url['filter.v.availability']=value;
  var new_url = Object.entries(change_url).map(([key, value]) => {
    return key + '=' + value;
  }).join('&');
  history.pushState({}, "Results for `AI`", 'search?q=' + q_value +"&"+ new_url);
  }
  else{
    change_url['filter.v.availability']='';
     // Key to be removed
var keyToRemove = 'filter.v.availability';

// Use filter to create a new array without the object containing the specified key
var newArray = change_url.filter(obj => !obj.hasOwnProperty(keyToRemove));
  var new_url = Object.entries(newArray).map(([key, value]) => {
    return key + '=' + value;
  }).join('&');
  history.pushState({}, "Results for `AI`", 'search?q=' + q_value +"&"+ new_url);
  }
}
function filter_price(type,value){
  if(type =='from'){
    change_url['filter.v.price.gte']=value;
  }
  else if(!change_url['filter.v.price.gte'] || value > change_url['filter.v.price.gte'])
  {
    change_url['filter.v.price.lte']=value;
  }
  else
  {
    document.getElementById('Filter-Price-LTE').value='';
  }
  var new_url = Object.entries(change_url).map(([key, value]) => {
    return key + '=' + value;
  }).join('&');
  history.pushState({}, "Results for `AI`", 'search?q=' + q_value +"&"+ new_url);
}
      const tokenAndSecretId =  getAccessToken();

async function filter_sort(value){
  {% comment %} let suggestionSearch = localStorage.getItem("suggestionSearch")
    if (!suggestionSearch || suggestionSearch == '') { {% endcomment %}
      {% comment %} suggestionSearch = localStorage.getItem("suggestionSearch")
    } {% endcomment %}
  change_url['sort_by']=value;
  var new_url = Object.entries(change_url).map(([key, value]) => {
    return key + '=' + value;
  }).join('&');
  history.pushState({}, "Results for `AI`", 'search?q=' + q_value +"&"+ new_url);
}
console.log("every times")

 document.addEventListener("DOMContentLoaded", function() {



  // Ensuring tokenAndSecretId is correctly resolved
  const tokenAndSecretIdPromise = getAccessToken();
  tokenAndSecretIdPromise.then(tokenAndSecretId => {
    // Validate that tokenAndSecretId is an object and contains the suggestionSearch property
    if (tokenAndSecretId && tokenAndSecretId.suggestionSearch) {
      setInterval(function() {
        console.log("entered into function");
        console.log("tokenAndSecretId", tokenAndSecretId);
        var predictiveSearchResults = document.getElementById(tokenAndSecretId?.suggestionSearch);

        if (predictiveSearchResults) {
          console.log("productGridContainer valllue:", predictiveSearchResults);
          // Assuming `productJSON` is available and contains the fetched data
          if (productJSON && productJSON.data && productJSON.data.search && productJSON.data.search.data) {
            console.log("productJSON.data.suggestions.data",productJSON.data.search.data)
            const firstFiveProducts = productJSON.data.search.data.slice(0, 5).map(product => {
              let changeText = tokenAndSecretId?.htmlSuggestion;
              changeText = changeText.replace(/\[\[NAME\]\]/g, product.name);
              changeText = changeText.replace(/\[\[IMAGE\]\]/g, product.image);
              {% comment %} console.log("changeText", changeText); {% endcomment %}
              return `
                ${changeText}
              `;
            }).join('');
            console.log("firstFiveProducts", firstFiveProducts);
            predictiveSearchResults.innerHTML = firstFiveProducts;
          } else {
            predictiveSearchResults.innerHTML = "No products found";
          }
        } else {
          console.error("Element with ID 'predictive-search-results-products-list' not found.");
        }

      var predictiveSearchQueriesList = document.querySelector('#predictive-search-results-groups-wrapper .predictive-search__result-group:nth-child(1)');
      var predictiveSearchQueriesList1 = document.querySelector('#predictive-search-results-groups-wrapper .predictive-search__result-group:nth-child(2)');
        if (predictiveSearchQueriesList) {
          predictiveSearchQueriesList.style.display = 'none';
          predictiveSearchQueriesList1.style.padding = '1rem 2rem';
        } else {
          console.error("Element with ID 'predictive-search-results-queries-list' not found.");
        }
      }, 1000); // Runs every 5 seconds
    } else {
      console.error("tokenAndSecretId or tokenAndSecretId.suggestionSearch is not defined correctly.");
    }
  }).catch(error => {
    console.error("Error resolving tokenAndSecretId promise:", error);
  });
});
    </script>
</body>
<div class="search-local">

</div>
